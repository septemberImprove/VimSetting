[CHRIS][VIM][安装流程][CREATE][160320]
1.  INSTALL vim, vim-nox and git
2.  git clone                       " 自己的仓库下载配置文件.vimrc .vimrc.vundle
3.  sh chris_vunde                  " 安装配置自己的vim
4.  QuickFix                        " vim自带标准插件
5.  INSTALL taglist_46              " 配置文件路径修改/usr/bin/ctags 或者/use/local/bin/ctags
6.  INSTALL WinManger               " http://www.vim.org/scripts/script.php?script_id=95
7.  INSTALL Grep.vim                " http://www.vim.org/scripts/script.php?script_id=1026
8.  InSTALL visualmark.vim
9.  APT_GET ISTALL cscope
总结: 2以后可以在自己的GitHub下载代码
"   4 -> 9视情况安装
"  https://github.com/spf13/spf13-vim 可以定时查看spf13的vim更新情况 集成到自己的环境


[常用重要配置]
" Use local before if available {
    if filereadable(expand("~/.vimrc.before.local"))
        source ~/.vimrc.before.local
    endif
" }

" NerdTree {
    if isdirectory(expand("~/.vim/bundle/nerdtree"))
        map <C-e> <plug>NERDTreeTabsToggle<CR>
        map <leader>e :NERDTreeFind<CR>
        nmap <leader>nt :NERDTreeFind<CR>

        let NERDTreeShowBookmarks=1
        let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
        let NERDTreeChDirMode=0
        let NERDTreeQuitOnOpen=0
        let NERDTreeMouseMode=2
        let NERDTreeShowHidden=1
        let NERDTreeKeepTreeInNewTab=1
        let g:nerdtree_tabs_open_on_gui_startup=0
    endif
" }


" 插件详细使用情况
[Grep]
:Grep	按照指定的规则在指定的文件中查找
:Rgrep	同上, 但是是递归的grep
:GrepBuffer	在所有打开的缓冲区中查找
:Bgrep	同上
:GrepArgs	在vim的argument filenames (:args)中查找
:Fgrep	运行fgrep
:Rfgrep	运行递归的fgrep
:Egrep	运行egrep
:Regrep	运行递归的egrep
:Agrep	运行agrep
:Ragrep	运行递归的agrep


[new-omni-completion(全能补全)]
Ctrl+P	向前切换成员
Ctrl+N	向后切换成员
Ctrl+E	表示退出下拉窗口, 并退回到原来录入的文字
Ctrl+Y	表示退出下拉窗口, 并接受当前选项
Ctrl+X Ctrl+L	整行补全
Ctrl+X Ctrl+N	根据当前文件里关键字补全
Ctrl+X Ctrl+K	根据字典补全
Ctrl+X Ctrl+T	根据同义词字典补全
Ctrl+X Ctrl+I	根据头文件内关键字补全
Ctrl+X Ctrl+]	根据标签补全
Ctrl+X Ctrl+F	补全文件名
Ctrl+X Ctrl+D	补全宏定义
Ctrl+X Ctrl+V	补全vim命令
Ctrl+X Ctrl+U	用户自定义补全方式
Ctrl+X Ctrl+S	拼写建议


[QuickFix]
:cc                显示详细错误信息 ( :help :cc )
:cp                跳到上一个错误 ( :help :cp )
:cn                跳到下一个错误 ( :help :cn )
:cl                列出所有错误 ( :help :cl )
:cw                如果有错误列表，则打开quickfix窗口 ( :help :cw )
:col               到前一个旧的错误列表 ( :help :col )
:cnew              到后一个较新的错误列表 ( :help :cnew )


[CSCOPE]
" 设定是否是使用quickfix窗口
:set cscopequickfix=s-,c-,d-,i-,t-,e-
" 为代码生成一个cscope的数据库, 在项目的根目录运行下面的命令:
$ cscope -Rbq
" 进入vim先把生成的cscope文件导入到vim中, 用下面的命令:
:cs add /home/wooin/vim71/cscope.out /home/wooin/vim71
"cscope find"的用法:
cs find c|d|e|f|g|i|s|t name
0 或 s	查找本 C 符号(可以跳过注释)
1 或 g	查找本定义
2 或 d	查找本函数调用的函数
3 或 c	查找调用本函数的函数
4 或 t	查找本字符串
6 或 e	查找本 egrep 模式
7 或 f	查找本文件
8 或 i	查找包含本文件的文件


[CtrlP]
" 原文链接：http://www.jianshu.com/p/a0b452f8f720
按<c-f>和<c-b>在三种查找模式中互相切换
按<c-y>来创建新文件和对应的父目录
按<c-d>来切换到只查找文件名而不是全路径
按<c-j>，<c-k>或箭头方向键来移动查找结果列表
按<c-t>或<c-v>，<c-x>来以新标签或分割窗口的方式来打开文件
按<c-z>来标识或取消标识文件，然后按<c-o>来打开文件
按<c-n>，<c-p>来在提示历史中选择下一个/上一个字符串

【CtrlP-funky】
搜索函数
<leader>fu 进入当前文件的函数列表搜索
<leader>fU 搜索当前光标下单词对应的函数

[NERD_commenter]
" \用,来表示 .vimrc中已配置
1、 \cc 注释当前行和选中行  
2、 \cn 没有发现和\cc有区别  
3、 \c<空格> 如果被选区域有部分被注释，则对被选区域执行取消注释操作，其它情况执行反转注释操作  
4、 \cm 对被选区域用一对注释符进行注释，前面的注释对每一行都会添加注释  
5、 \ci 执行反转注释操作，选中区域注释部分取消注释，非注释部分添加注释  
6、 \cs 添加性感的注释，代码开头介绍部分通常使用该注释  
7、 \cy 添加注释，并复制被添加注释的部分  
8、 \c$ 注释当前光标到改行结尾的内容  
9、 \cA 跳转到该行结尾添加注释，并进入编辑模式  
10、\ca 转换注释的方式，比如： /**/和//  
11、\cl \cb 左对齐和左右对其，左右对其主要针对/**/  
12、\cu 取消注释


【vim-multiple-cursors】
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
"无需配置  默认就好
